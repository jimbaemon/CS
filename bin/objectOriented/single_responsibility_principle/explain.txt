#단일 책임 원칙 (Single responsibility principle)
-클래스에는 하나의 책임만 있어야 한다
##원칙 위반시 증상
-기능 변경이 발생하면 연쇄적으로 코드 수정을 해야 한다.
-기능이 너무 복잡해서 재사용하기가 어렵다
-메서드 몸체의 크기가 너무 크다
#원칙 적용 방법
-클래스를 변경하는 이유는 하나여야 한다는 기준으로 기능을 나눈다

#느낀점
객체지향의 장점은 직관성이 좋다는 거다. 

지금 이수준의 클래스는 절차지향적으로 짜면 속도도 빠를 뿐더러 직관성도 나쁘지 않다.

하지만, 기존예제인 카페에서 요리라는 하나의 클래스에서 if 문으로 빵의 조리법 커피의 조리법등 다양한 주문이 들어올수록 해당 클래스는 복잡해질 것이고 결국 나중에는 나 외에는 아무도 알아보지 못하는 코드가 될 것이다.

객체지향은 속도나 효율성이 아닌 다수가 함께 일하기 좋은 코딩에 집중해야한다고 느꼇다. 이상